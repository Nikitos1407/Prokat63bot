
require('dotenv').config();
const express = require('express');
const { Telegraf, Markup, session } = require('telegraf');

const bot = new Telegraf(process.env.BOT_TOKEN);
const ownerId = process.env.OWNER_ID;
bot.use(session());

const userStates = new Map();

const tools = [
  {
    id: 'perforator',
    name: '–ü–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä Makita –†–ö2470',
    price: 1400,
    deposit: 5000,
    description: '–ú–æ—â–Ω—ã–π –ø–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±—É—Ä–µ–Ω–∏—è –±–µ—Ç–æ–Ω–∞ –∏ –∫–∏—Ä–ø–∏—á–∞.',
    photo: 'https://raw.githubusercontent.com/Nikitos1407/Prokat63bot/main/images/molotok-original1.jpg'
  }
];

const mainMenu = Markup.keyboard([
  ['üìã –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤'],
  ['üì¶ –ö–∞–∫ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å', 'üìç –ì–¥–µ –∑–∞–±—Ä–∞—Ç—å?'],
  ['üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å', 'üí¨ –û—Ç–∑—ã–≤—ã', '‚öôÔ∏è –û –Ω–∞—Å']
]).resize();

function isValidDate(dateStr) {
  return /^\d{2}\.\d{2}\.\d{4}$/.test(dateStr);
}

bot.start(async (ctx) => {
  await ctx.replyWithPhoto(
    'https://raw.githubusercontent.com/Nikitos1407/Prokat63bot/main/images/logo.png',
    {
      caption: `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–ü–†–û–ö–ê–¢ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ 63*!

üìç *–ì–∞—Ä–∞–∂–Ω—ã–π –±–æ–∫—Å (–ù–æ–≤–æ–∫—É–π–±—ã—à–µ–≤—Å–∫)*
üïò –†–∞–±–æ—Ç–∞–µ–º —Å 9:00 –¥–æ 21:00
üíµ –û–ø–ª–∞—Ç–∞: –Ω–∞–ª–∏—á–Ω—ã–µ / –ø–µ—Ä–µ–≤–æ–¥

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ /menu –¥–ª—è –Ω–∞—á–∞–ª–∞.`,
      parse_mode: 'Markdown',
      ...mainMenu
    }
  );
});

bot.command('menu', (ctx) => ctx.reply('üì≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', mainMenu));

bot.hears('üìã –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤', async (ctx) => {
  const buttons = tools.map(tool => [Markup.button.callback(`${tool.name} ‚Äî ${tool.price}‚ÇΩ`, tool.id)]);
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞—Ä–µ–Ω–¥—ã:', Markup.inlineKeyboard(buttons));
});

tools.forEach(tool => {
  bot.action(tool.id, async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.replyWithPhoto(tool.photo, {
      caption: `üõ† *${tool.name}*

${tool.description}

üí∞ *–¶–µ–Ω–∞:* ${tool.price} ‚ÇΩ / —Å—É—Ç–∫–∏
üîê *–ó–∞–ª–æ–≥:* ${tool.deposit} ‚ÇΩ`,
      parse_mode: 'Markdown',
      reply_markup: Markup.inlineKeyboard([
        [Markup.button.callback('üëâ –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å', `rent_${tool.id}`)],
        [Markup.button.callback('üè† –ú–µ–Ω—é', 'go_menu')]
      ])
    });
  });

  bot.action(`rent_${tool.id}`, async (ctx) => {
    await ctx.answerCbQuery();
    userStates.set(ctx.chat.id, { step: 'name', tool });
    await ctx.reply('üìç –®–∞–≥ 1 –∏–∑ 4 ‚Äî –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:');
  });
});

bot.on('text', async (ctx) => {
  const state = userStates.get(ctx.chat.id);
  if (!state) return;

  const text = ctx.message.text.trim();

  if (state.step === 'name') {
    state.name = text;
    state.step = 'phone';
    await ctx.reply('üìç –®–∞–≥ 2 –∏–∑ 4 ‚Äî –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):');
  } else if (state.step === 'phone') {
    if (!/^\d{7,15}$/.test(text)) {
      return ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):');
    }
    state.phone = text;
    state.step = 'startDate';
    await ctx.reply('üìç –®–∞–≥ 3 –∏–∑ 4 ‚Äî –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã (–î–î.–ú–ú.–ì–ì–ì–ì):');
  } else if (state.step === 'startDate') {
    if (!isValidDate(text)) {
      return ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:');
    }
    state.startDate = text;
    state.step = 'endDate';
    await ctx.reply('üìç –®–∞–≥ 4 –∏–∑ 4 ‚Äî –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã (–î–î.–ú–ú.–ì–ì–ì–ì):');
  } else if (state.step === 'endDate') {
    if (!isValidDate(text)) {
      return ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:');
    }

    state.endDate = text;
    state.step = 'confirm';

    await ctx.reply(
      `üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞—è–≤–∫—É:

üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: ${state.tool.name}
üë§ –ò–º—è: ${state.name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${state.phone}
üìÖ –°: ${state.startDate}
üìÖ –ü–æ: ${state.endDate}

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑?`,
      Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'confirm')],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')],
        [Markup.button.callback('üè† –ú–µ–Ω—é', 'go_menu')]
      ])
    );
  }
});

bot.action('confirm', async (ctx) => {
  const state = userStates.get(ctx.chat.id);
  if (!state) return;

  const message = `üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:

üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: ${state.tool.name}
üë§ –ò–º—è: ${state.name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${state.phone}
üìÖ –°: ${state.startDate}
üìÖ –ü–æ: ${state.endDate}`;

  await ctx.telegram.sendMessage(ownerId, message);
  await ctx.editMessageText('‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å. –û—Ç–ª–∏—á–Ω–æ–≥–æ –≤–∞–º –¥–Ω—è ‚òÄÔ∏è');
  userStates.delete(ctx.chat.id);
});

bot.action('cancel', async (ctx) => {
  userStates.delete(ctx.chat.id);
  await ctx.editMessageText('‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî –Ω–∞–∂–º–∏—Ç–µ /menu');
});

bot.action('go_menu', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply('üì≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', mainMenu);
});

const app = express();
app.get('/', (req, res) => {
  res.send('ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä Express –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

bot.launch().then(() => {
  console.log('ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ polling');
});
