require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');

const bot = new Telegraf(process.env.BOT_TOKEN);
const ownerId = process.env.OWNER_ID;

const tools = [
  {
    id: 'perforator',
    name: '–ü–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä Makita –†–ö2470',
    price: 1400,
    deposit: 5000,
    description: '–ú–æ—â–Ω—ã–π –∏ –Ω–∞–¥—ë–∂–Ω—ã–π –ø–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±—É—Ä–µ–Ω–∏—è –±–µ—Ç–æ–Ω–∞, –∫–∏—Ä–ø–∏—á–∞ –∏ –ø—Ä–æ—á–∏—Ö —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç.',
    photo: 'https://raw.githubusercontent.com/Nikitos1407/Prokat63bot/main/images/molotok-original1.jpg'
  },
  {
    id: 'vibro',
    name: '–í–∏–±—Ä–æ–ø–ª–∏—Ç–∞ Champion PC9045F',
    price: 1800,
    deposit: 5000,
    description: '–ë–µ–Ω–∑–∏–Ω–æ–≤–∞—è –≤–∏–±—Ä–æ–ø–ª–∏—Ç–∞ 4.8 –∫–í—Ç –¥–ª—è —É–ø–ª–æ—Ç–Ω–µ–Ω–∏—è –≥—Ä—É–Ω—Ç–∞, —Ç—Ä–æ—Ç—É–∞—Ä–Ω–æ–π –ø–ª–∏—Ç–∫–∏, —â–µ–±–Ω—è.',
    photo: 'https://raw.githubusercontent.com/Nikitos1407/Prokat63bot/main/images/vibroplate-original1.jpg'
  },
  {
    id: 'mixer',
    name: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –º–∏–∫—Å–µ—Ä –†–µ—Å–∞–Ω—Ç–∞ –°–ú-1600–≠-2',
    price: 850,
    deposit: 3000,
    description: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∑–∞–º–µ—Å–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–º–µ—Å–µ–π. –£–¥–æ–±–Ω–∞—è –¥–≤—É—Ö—Å–∫–æ—Ä–æ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å.',
    photo: 'https://raw.githubusercontent.com/Nikitos1407/Prokat63bot/main/images/mikser-original1.jpg'
  },
  {
    id: 'auger',
    name: '–ú–æ—Ç–æ–±—É—Ä Huter GGD-300 —Å –∫–æ–º–ø–ª–µ–∫—Ç–æ–º',
    price: 1300,
    deposit: 5000,
    description: '–° —à–Ω–µ–∫–∞–º–∏ (100‚Äì250 –º–º), —É–¥–ª–∏–Ω–∏—Ç–µ–ª—å 1000 –º–º. –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–±–æ—Ä–æ–≤, –±—É—Ä–µ–Ω–∏—è –ª—É–Ω–æ–∫ –∏ —Å–≤–∞–π.',
    photo: 'https://raw.githubusercontent.com/Nikitos1407/Prokat63bot/main/images/motobur1.jpg'
  },
  {
    id: 'trimmer',
    name: '–ú–æ—Ç–æ–∫–æ—Å–∞ Champion',
    price: 1300,
    deposit: 3000,
    description: '–ë–µ–Ω–∑–∏–Ω–æ–≤—ã–π —Ç—Ä–∏–º–º–µ—Ä –¥–ª—è –ø–æ–∫–æ—Å–∞ —Ç—Ä–∞–≤—ã, –∫—É—Å—Ç–∞—Ä–Ω–∏–∫–æ–≤ –∏ —É—á–∞—Å—Ç–∫–æ–≤ —Å—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.',
    photo: 'https://raw.githubusercontent.com/Nikitos1407/Prokat63bot/main/images/motokosa1.jpg'
  }
];

// –ü–∞–º—è—Ç—å –¥–ª—è —à–∞–≥–æ–≤
const userSteps = {};

bot.start(async (ctx) => {
  const welcome = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–ü–†–û–ö–ê–¢ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ 63*!\n
üìç *–ì–∞—Ä–∞–∂–Ω—ã–π –±–æ–∫—Å (–ù–æ–≤–æ–∫—É–π–±—ã—à–µ–≤—Å–∫)*
üïò –†–∞–±–æ—Ç–∞–µ–º —Å 9:00 –¥–æ 21:00
üíµ –û–ø–ª–∞—Ç–∞: –Ω–∞–ª–∏—á–Ω—ã–µ / –ø–µ—Ä–µ–≤–æ–¥

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞—Ä–µ–Ω–¥—ã:`;

  const buttons = tools.map(tool => [
    Markup.button.callback(`${tool.name} ‚Äî ${tool.price}‚ÇΩ`, tool.id)
  ]);

  await ctx.sendPhoto(
    'https://raw.githubusercontent.com/Nikitos1407/Prokat63bot/main/images/logo.png',
    {
      caption: welcome,
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: buttons
      }
    }
  );
});

tools.forEach(tool => {
  bot.action(tool.id, async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.sendPhoto(tool.photo, {
      caption: `üõ† *${tool.name}*\n\n${tool.description}\n\nüí∞ *–¶–µ–Ω–∞:* ${tool.price} ‚ÇΩ / —Å—É—Ç–∫–∏\nüîê *–ó–∞–ª–æ–≥:* ${tool.deposit} ‚ÇΩ`,
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [Markup.button.callback('üëâ –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å', `rent_${tool.id}`)]
        ]
      }
    });
  });

  bot.action(`rent_${tool.id}`, async (ctx) => {
    await ctx.answerCbQuery();
    userSteps[ctx.from.id] = {
      step: 'name',
      tool: tool.name,
      data: {}
    };
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–∏–º—è*:', { parse_mode: 'Markdown' });
  });
});

bot.on('text', async (ctx) => {
  const id = ctx.from.id;
  const state = userSteps[id];

  if (!state) return;

  const text = ctx.message.text;

  if (state.step === 'name') {
    state.data.name = text;
    state.step = 'phone';
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*:', { parse_mode: 'Markdown' });
  } else if (state.step === 'phone') {
    state.data.phone = text;
    state.step = 'start';
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ *–¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã* (–Ω–∞–ø—Ä–∏–º–µ—Ä, 27.07.2025):', { parse_mode: 'Markdown' });
  } else if (state.step === 'start') {
    state.data.start = text;
    state.step = 'end';
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ *–¥–∞—Ç—É –∫–æ–Ω—Ü–∞ –∞—Ä–µ–Ω–¥—ã*:', { parse_mode: 'Markdown' });
  } else if (state.step === 'end') {
    state.data.end = text;
    state.step = 'confirm';

    const summary = `üîî –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞—è–≤–∫—É:\n\n` +
      `üõ† –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: *${state.tool}*\n` +
      `üë§ –ò–º—è: *${state.data.name}*\n` +
      `üìû –¢–µ–ª–µ—Ñ–æ–Ω: *${state.data.phone}*\n` +
      `üìÖ –°: *${state.data.start}* –ø–æ *${state.data.end}*`;

    await ctx.reply(summary, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', `confirm_${id}`)],
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', `cancel_${id}`)]
        ]
      }
    });
  }
});

bot.action(/^confirm_(\d+)$/, async (ctx) => {
  const id = ctx.match[1];
  const state = userSteps[id];
  if (!state) return;

  const message = `üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n\n` +
    `üõ† –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: ${state.tool}\n` +
    `üë§ –ò–º—è: ${state.data.name}\n` +
    `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${state.data.phone}\n` +
    `üìÖ –ê—Ä–µ–Ω–¥–∞: —Å ${state.data.start} –ø–æ ${state.data.end}`;

  await ctx.telegram.sendMessage(ownerId, message);
  await ctx.reply('‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å. –û—Ç–ª–∏—á–Ω–æ–≥–æ –≤–∞–º –¥–Ω—è!');

  delete userSteps[id];
});

bot.action(/^cancel_(\d+)$/, async (ctx) => {
  const id = ctx.match[1];
  delete userSteps[id];
  await ctx.reply('‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
});

bot.launch();
console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
